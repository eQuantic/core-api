// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eQuantic.Core.Api.Resources
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\projects\equantic\github\core-api\src\eQuantic.Core.Api\Resources\SwaggerJson.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class SwaggerJson : SwaggerJsonBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 2 "C:\projects\equantic\github\core-api\src\eQuantic.Core.Api\Resources\SwaggerJson.tt"

    var description = DocumentationOptions.AuthorizationOptions?.Description ?? "Please enter into field the word 'Bearer' following by space and JWT";

            
            #line default
            #line hidden
            this.Write("(function ()\r\n{\r\n    const overrider = () =>\r\n    {\r\n        const swagger = window.ui;\r\n        if (!swagger) \r\n        {\r\n            console.error('Swagger wasn\\'t found');\r\n            return;\r\n        }\r\n\r\n        ensureAuthorization(swagger);\r\n        reloadSchemaOnAuth(swagger);\r\n        clearInputPlaceHolder(swagger);\r\n        showLoginUI(swagger);\r\n    }\r\n\r\n    const getAuthorization = (swagger) => swagger.auth()._root.entries.find(e => e[0] === 'authorized');\r\n    const isAuthorized = (swagger) =>\r\n    {\r\n        const auth = getAuthorization(swagger);\r\n        return auth && auth[1].size !== 0;\r\n    };\r\n\r\n    // a hacky way to append authorization header - we are basically intercepting \r\n    // all requests, if no authorization was attached while user did authorized himself,\r\n    // append token to request\r\n    const ensureAuthorization = (swagger) => \r\n    {\r\n        // retrieve bearer token from authorization\r\n        const getBearer = () => \r\n        {\r\n            const auth = getAuthorization(swagger);\r\n            const def = auth[1]._root.entries.find(e => e[0] === 'Bearer');\r\n            if (!def)\r\n                return undefined;\r\n\r\n            const token = def[1]._root.entries.find(e => e[0] === 'value');\r\n            if (!token)\r\n                return undefined;\r\n\r\n            return token[1];\r\n        }\r\n\r\n        // override fetch function of Swagger to make sure\r\n        // that on every request of the client is authorized append auth-header\r\n        const fetch = swagger.fn.fetch;\r\n        swagger.fn.fetch = (req) => \r\n        {\r\n            if (!req.headers.Authorization && isAuthorized(swagger)) \r\n            {\r\n                const bearer = getBearer();\r\n                if (bearer) \r\n                {\r\n                    req.headers.Authorization = bearer;\r\n                }\r\n            }\r\n            return fetch(req);\r\n        }\r\n    };\r\n    // makes that once user triggers performs authorization,\r\n    // the schema will be reloaded from backend url\r\n    const reloadSchemaOnAuth = (swagger) => \r\n    {\r\n        const getCurrentUrl = () => \r\n        {\r\n            const spec = swagger.getState()._root.entries.find(e => e[0] === 'spec');\r\n            if (!spec)\r\n                return undefined;\r\n\r\n            const url = spec[1]._root.entries.find(e => e[0] === 'url');\r\n            if (!url)\r\n                return undefined;\r\n\r\n            return url[1];\r\n        }\r\n        const reload = () => \r\n        {\r\n            const url = getCurrentUrl();\r\n            if (url) \r\n            {\r\n                swagger.specActions.download(url);\r\n            }\r\n        };\r\n\r\n        const handler = (caller, args) => \r\n        {\r\n            const result = caller(args);\r\n\r\n            if (result && result.then) \r\n            {\r\n                result.then(() => reload())\r\n            }\r\n            else\r\n            {\r\n                reload();\r\n            }\r\n            return result;\r\n        }\r\n\r\n        const auth = swagger.authActions.authorize;\r\n        swagger.authActions.authorize = (args) => handler(auth, args);\r\n        const logout = swagger.authActions.logout;\r\n        swagger.authActions.logout = (args) => handler(logout, args);\r\n    };\r\n    /**\r\n     * Reset input element placeholder\r\n     * @param {any} swagger\r\n     */\r\n    const clearInputPlaceHolder = (swagger) =>\r\n    {\r\n        //https://github.com/api-platform/core/blob/main/src/Bridge/Symfony/Bundle/Resources/public/init-swagger-ui.js#L6-L41\r\n        new MutationObserver(function (mutations, self)\r\n        {\r\n            var elements = document.querySelectorAll(\"input[type=text]\");\r\n            for (var i = 0; i < elements.length; i++)\r\n                elements[i].placeholder = \"\";\r\n        }).observe(document, { childList: true, subtree: true });\r\n    }\r\n    /**\r\n     * Show login UI\r\n     * @param {any} swagger\r\n     */\r\n    const showLoginUI = (swagger) =>\r\n    {\r\n        //https://github.com/api-platform/core/blob/main/src/Bridge/Symfony/Bundle/Resources/public/init-swagger-ui.js#L6-L41\r\n        new MutationObserver(function (mutations, self)\r\n        {\r\n            var rootDiv = document.querySelector(\"#swagger-ui > section > div.swagger-ui > div:nth-child(2)\");\r\n            if (rootDiv == null)\r\n                return;\r\n\r\n            var informationContainerDiv = rootDiv.querySelector(\"div.information-container.wrapper\");\r\n            if (informationContainerDiv == null)\r\n                return;\r\n\r\n            var descriptionDiv = informationContainerDiv.querySelector(\"section > div > div > div.description\");\r\n            if (descriptionDiv == null)\r\n                return;\r\n\r\n            var loginDiv = descriptionDiv.querySelector(\"div.login\");\r\n            if (loginDiv != null)\r\n                return;\r\n\r\n            //Check authentication\r\n            if (isAuthorized(swagger))\r\n                return;\r\n\r\n");
            
            #line 153 "C:\projects\equantic\github\core-api\src\eQuantic.Core.Api\Resources\SwaggerJson.tt"

    if (DocumentationOptions.HideEndpointsBeforeSignIn)
    {

            
            #line default
            #line hidden
            this.Write("            //Remove elements different from information-container wrapper\r\n            for (var i = 0; i < rootDiv.children.length; i++)\r\n            {\r\n                var child = rootDiv.children[i];\r\n                if (child !== informationContainerDiv)\r\n                    child.remove();\r\n            }\r\n");
            
            #line 164 "C:\projects\equantic\github\core-api\src\eQuantic.Core.Api\Resources\SwaggerJson.tt"

    }

            
            #line default
            #line hidden
            this.Write("            //Create UI di login\r\n            createLoginUI(descriptionDiv);\r\n            \r\n        }).observe(document, { childList: true, subtree: true });\r\n\r\n        /**\r\n         * Create login ui elements\r\n         * @param {any} rootDiv\r\n         */\r\n        const createLoginUI = function (rootDiv)\r\n        {\r\n            var div = document.createElement(\"div\");\r\n            div.className = \"login\";\r\n");
            
            #line 180 "C:\projects\equantic\github\core-api\src\eQuantic.Core.Api\Resources\SwaggerJson.tt"

    if (DocumentationOptions.HideEndpointsBeforeSignIn)
    {

            
            #line default
            #line hidden
            this.Write("            rootDiv.appendChild(div);\r\n");
            
            #line 185 "C:\projects\equantic\github\core-api\src\eQuantic.Core.Api\Resources\SwaggerJson.tt"

    }
    else
    {

            
            #line default
            #line hidden
            this.Write("            rootDiv.insertBefore(div, rootDiv.children[0]);\r\n");
            
            #line 191 "C:\projects\equantic\github\core-api\src\eQuantic.Core.Api\Resources\SwaggerJson.tt"

    }

            
            #line default
            #line hidden
            this.Write("            //UserName\r\n            var userNameLabel = document.createElement(\"label\");\r\n            div.appendChild(userNameLabel);\r\n\r\n            var userNameSpan = document.createElement(\"span\");\r\n            userNameSpan.innerText = \"User\";\r\n            userNameLabel.appendChild(userNameSpan);\r\n            \r\n            var userNameInput = document.createElement(\"input\");\r\n            userNameInput.type = \"text\";\r\n            userNameInput.style = \"margin-left: 10px; margin-right: 10px;\";\r\n            userNameLabel.appendChild(userNameInput);\r\n\r\n            //Password\r\n            var passwordLabel = document.createElement(\"label\");\r\n            div.appendChild(passwordLabel);\r\n\r\n            var passwordSpan = document.createElement(\"span\");\r\n            passwordSpan.innerText = \"Password\";\r\n            passwordLabel.appendChild(passwordSpan);\r\n\r\n            var passwordInput = document.createElement(\"input\");\r\n            passwordInput.type = \"password\";\r\n            passwordInput.style = \"margin-left: 10px; margin-right: 10px;\";\r\n            passwordLabel.appendChild(passwordInput);\r\n\r\n            //Login button\r\n            var loginButton = document.createElement(\"button\")\r\n            loginButton.type = \"submit\";\r\n            loginButton.type = \"button\";\r\n            loginButton.classList.add(\"btn\");\r\n            loginButton.classList.add(\"auth\");\r\n            loginButton.classList.add(\"authorize\");\r\n            loginButton.classList.add(\"button\");\r\n            loginButton.innerText = \"Login\";\r\n            loginButton.onclick = function ()\r\n            {\r\n                var userName = userNameInput.value;\r\n                var password = passwordInput.value;\r\n\r\n                if (userName === \"\" || password === \"\")\r\n                {\r\n                    alert(\"Insert userName and password!\");\r\n                    return;\r\n                }\r\n\r\n                login(userName, password);\r\n            };\r\n\r\n            div.appendChild(loginButton);\r\n        }\r\n        /**\r\n         * Manage login\r\n         * @param {any} userName UserName\r\n         * @param {any} password Password\r\n         */\r\n        const login = function (userName, password)\r\n        {\r\n            var xhr = new XMLHttpRequest();\r\n\r\n            xhr.onreadystatechange = function ()\r\n            {\r\n                if (xhr.readyState == XMLHttpRequest.DONE)\r\n                {\r\n                    if (xhr.status == 200 || xhr.status == 400)\r\n                    {\r\n                        var response = JSON.parse(xhr.responseText);\r\n                        if (!response.accessToken)\r\n                        {\r\n                            alert(response.errorMessage);\r\n                            return;\r\n                        }\r\n\r\n                        var accessToken = response.accessToken;\r\n\r\n                        var obj = {\r\n                            \"Bearer\": {\r\n                                \"name\": \"Bearer\",\r\n                                \"schema\": {\r\n                                    \"type\": \"apiKey\",\r\n                                    \"description\": \"");
            
            #line 274 "C:\projects\equantic\github\core-api\src\eQuantic.Core.Api\Resources\SwaggerJson.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description));
            
            #line default
            #line hidden
            this.Write("\",\r\n                                    \"name\": \"Authorization\",\r\n                                    \"in\": \"header\"\r\n                                },\r\n                                value: \"Bearer \" + accessToken\r\n                            }\r\n                        };\r\n\r\n                        swagger.authActions.authorize(obj);\r\n                    }\r\n                    else\r\n                    {\r\n                        alert('error ' + xhr.status);\r\n                    }\r\n                }\r\n            };\r\n\r\n            xhr.open(\"POST\", \"");
            
            #line 291 "C:\projects\equantic\github\core-api\src\eQuantic.Core.Api\Resources\SwaggerJson.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DocumentationOptions.SignInUrl!));
            
            #line default
            #line hidden
            this.Write("\", true);\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n            var json = JSON.stringify({ \"email\": userName, \"password\": password });\r\n\r\n            xhr.send(json);\r\n        }\r\n    }\r\n\r\n    // append to event right after SwaggerUIBundle initialized\r\n    window.addEventListener('load', () => setTimeout(overrider, 0), false);\r\n}());");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class SwaggerJsonBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
