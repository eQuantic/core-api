// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eQuantic.Core.Api.Resources
{
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "/Users/edgarmesquita/projects/github/equantic/core-api/src/eQuantic.Core.Api/Resources/SwaggerJson.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class SwaggerJson : SwaggerJsonBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 4 "/Users/edgarmesquita/projects/github/equantic/core-api/src/eQuantic.Core.Api/Resources/SwaggerJson.tt"

    var description = DocumentationOptions.AuthorizationOptions?.Description ?? "Please enter into field the word 'Bearer' following by space and JWT";

            
            #line default
            #line hidden
            this.Write("(function ()\n{\n    const overrider = () =>\n    {\n        const swagger = window.ui;\n        if (!swagger) \n        {\n            console.error('Swagger wasn\\'t found');\n            return;\n        }\n\n        ensureAuthorization(swagger);\n        reloadSchemaOnAuth(swagger);\n        clearInputPlaceHolder(swagger);\n        showLoginUI(swagger);\n    }\n\n    const getAuthorization = (swagger) => swagger.auth()._root.entries.find(e => e[0] === 'authorized');\n    const isAuthorized = (swagger) =>\n    {\n        const auth = getAuthorization(swagger);\n        return auth && auth[1].size !== 0;\n    };\n\n    // a hacky way to append authorization header - we are basically intercepting \n    // all requests, if no authorization was attached while user did authorized himself,\n    // append token to request\n    const ensureAuthorization = (swagger) => \n    {\n        // retrieve bearer token from authorization\n        const getBearer = () => \n        {\n            const auth = getAuthorization(swagger);\n            const def = auth[1]._root.entries.find(e => e[0] === 'Bearer');\n            if (!def)\n                return undefined;\n\n            const token = def[1]._root.entries.find(e => e[0] === 'value');\n            if (!token)\n                return undefined;\n\n            return token[1];\n        }\n\n        // override fetch function of Swagger to make sure\n        // that on every request of the client is authorized append auth-header\n        const fetch = swagger.fn.fetch;\n        swagger.fn.fetch = (req) => \n        {\n            if (!req.headers.Authorization && isAuthorized(swagger)) \n            {\n                const bearer = getBearer();\n                if (bearer) \n                {\n                    req.headers.Authorization = bearer;\n                }\n            }\n            return fetch(req);\n        }\n    };\n    // makes that once user triggers performs authorization,\n    // the schema will be reloaded from backend url\n    const reloadSchemaOnAuth = (swagger) => \n    {\n        const getCurrentUrl = () => \n        {\n            const spec = swagger.getState()._root.entries.find(e => e[0] === 'spec');\n            if (!spec)\n                return undefined;\n\n            const url = spec[1]._root.entries.find(e => e[0] === 'url');\n            if (!url)\n                return undefined;\n\n            return url[1];\n        }\n        const reload = () => \n        {\n            const url = getCurrentUrl();\n            if (url) \n            {\n                swagger.specActions.download(url);\n            }\n        };\n\n        const handler = (caller, args) => \n        {\n            const result = caller(args);\n\n            if (result && result.then) \n            {\n                result.then(() => reload())\n            }\n            else\n            {\n                reload();\n            }\n            return result;\n        }\n\n        const auth = swagger.authActions.authorize;\n        swagger.authActions.authorize = (args) => handler(auth, args);\n        const logout = swagger.authActions.logout;\n        swagger.authActions.logout = (args) => handler(logout, args);\n    };\n    /**\n     * Reset input element placeholder\n     * @param {any} swagger\n     */\n    const clearInputPlaceHolder = (swagger) =>\n    {\n        //https://github.com/api-platform/core/blob/main/src/Bridge/Symfony/Bundle/Resources/public/init-swagger-ui.js#L6-L41\n        new MutationObserver(function (mutations, self)\n        {\n            var elements = document.querySelectorAll(\"input[type=text]\");\n            for (var i = 0; i < elements.length; i++)\n                elements[i].placeholder = \"\";\n        }).observe(document, { childList: true, subtree: true });\n    }\n    /**\n     * Show login UI\n     * @param {any} swagger\n     */\n    const showLoginUI = (swagger) =>\n    {\n        //https://github.com/api-platform/core/blob/main/src/Bridge/Symfony/Bundle/Resources/public/init-swagger-ui.js#L6-L41\n        new MutationObserver(function (mutations, self)\n        {\n            var rootDiv = document.querySelector(\"#swagger-ui > section > div.swagger-ui > div:nth-child(2)\");\n            if (rootDiv == null)\n                return;\n\n            var informationContainerDiv = rootDiv.querySelector(\"div.information-container.wrapper\");\n            if (informationContainerDiv == null)\n                return;\n\n            var descriptionDiv = informationContainerDiv.querySelector(\"section > div > div > div.description\");\n            if (descriptionDiv == null)\n                return;\n\n            var loginDiv = descriptionDiv.querySelector(\"div.login\");\n            if (loginDiv != null)\n                return;\n\n            //Check authentication\n            if (isAuthorized(swagger))\n                return;\n\n");
            
            #line 155 "/Users/edgarmesquita/projects/github/equantic/core-api/src/eQuantic.Core.Api/Resources/SwaggerJson.tt"

    if (DocumentationOptions.HideEndpointsBeforeSignIn)
    {

            
            #line default
            #line hidden
            this.Write("            //Remove elements different from information-container wrapper\n            for (var i = 0; i < rootDiv.children.length; i++)\n            {\n                var child = rootDiv.children[i];\n                if (child !== informationContainerDiv)\n                    child.remove();\n            }\n");
            
            #line 166 "/Users/edgarmesquita/projects/github/equantic/core-api/src/eQuantic.Core.Api/Resources/SwaggerJson.tt"

    }

            
            #line default
            #line hidden
            this.Write("            //Create UI di login\n            createLoginUI(descriptionDiv);\n            \n        }).observe(document, { childList: true, subtree: true });\n\n        /**\n         * Create login ui elements\n         * @param {any} rootDiv\n         */\n        const createLoginUI = function (rootDiv)\n        {\n            var div = document.createElement(\"div\");\n            div.className = \"login\";\n");
            
            #line 182 "/Users/edgarmesquita/projects/github/equantic/core-api/src/eQuantic.Core.Api/Resources/SwaggerJson.tt"

    if (DocumentationOptions.HideEndpointsBeforeSignIn)
    {

            
            #line default
            #line hidden
            this.Write("            rootDiv.appendChild(div);\n");
            
            #line 187 "/Users/edgarmesquita/projects/github/equantic/core-api/src/eQuantic.Core.Api/Resources/SwaggerJson.tt"

    }
    else
    {

            
            #line default
            #line hidden
            this.Write("            rootDiv.insertBefore(div, rootDiv.children[0]);\n");
            
            #line 193 "/Users/edgarmesquita/projects/github/equantic/core-api/src/eQuantic.Core.Api/Resources/SwaggerJson.tt"

    }

            
            #line default
            #line hidden
            this.Write("            //UserName\n            var userNameLabel = document.createElement(\"label\");\n            div.appendChild(userNameLabel);\n\n            var userNameSpan = document.createElement(\"span\");\n            userNameSpan.innerText = \"User\";\n            userNameLabel.appendChild(userNameSpan);\n            \n            var userNameInput = document.createElement(\"input\");\n            userNameInput.type = \"text\";\n            userNameInput.style = \"margin-left: 10px; margin-right: 10px;\";\n            userNameLabel.appendChild(userNameInput);\n\n            //Password\n            var passwordLabel = document.createElement(\"label\");\n            div.appendChild(passwordLabel);\n\n            var passwordSpan = document.createElement(\"span\");\n            passwordSpan.innerText = \"Password\";\n            passwordLabel.appendChild(passwordSpan);\n\n            var passwordInput = document.createElement(\"input\");\n            passwordInput.type = \"password\";\n            passwordInput.style = \"margin-left: 10px; margin-right: 10px;\";\n            passwordLabel.appendChild(passwordInput);\n\n            //Login button\n            var loginButton = document.createElement(\"button\")\n            loginButton.type = \"submit\";\n            loginButton.type = \"button\";\n            loginButton.classList.add(\"btn\");\n            loginButton.classList.add(\"auth\");\n            loginButton.classList.add(\"authorize\");\n            loginButton.classList.add(\"button\");\n            loginButton.innerText = \"Login\";\n            loginButton.onclick = function ()\n            {\n                var userName = userNameInput.value;\n                var password = passwordInput.value;\n\n                if (userName === \"\" || password === \"\")\n                {\n                    alert(\"Insert userName and password!\");\n                    return;\n                }\n\n                login(userName, password);\n            };\n\n            div.appendChild(loginButton);\n        }\n        /**\n         * Manage login\n         * @param {any} userName UserName\n         * @param {any} password Password\n         */\n        const login = function (userName, password)\n        {\n            var xhr = new XMLHttpRequest();\n\n            xhr.onreadystatechange = function ()\n            {\n                if (xhr.readyState == XMLHttpRequest.DONE)\n                {\n                    if (xhr.status == 200 || xhr.status == 400)\n                    {\n                        var response = JSON.parse(xhr.responseText);\n                        if (!response.accessToken)\n                        {\n                            alert(response.errorMessage);\n                            return;\n                        }\n\n                        var accessToken = response.accessToken;\n\n                        var obj = {\n                            \"Bearer\": {\n                                \"name\": \"Bearer\",\n                                \"schema\": {\n                                    \"type\": \"apiKey\",\n                                    \"description\": \"");
            
            #line 276 "/Users/edgarmesquita/projects/github/equantic/core-api/src/eQuantic.Core.Api/Resources/SwaggerJson.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description));
            
            #line default
            #line hidden
            this.Write("\",\n                                    \"name\": \"Authorization\",\n                                    \"in\": \"header\"\n                                },\n                                value: \"Bearer \" + accessToken\n                            }\n                        };\n\n                        swagger.authActions.authorize(obj);\n                    }\n                    else\n                    {\n                        alert('error ' + xhr.status);\n                    }\n                }\n            };\n\n            xhr.open(\"POST\", \"");
            
            #line 293 "/Users/edgarmesquita/projects/github/equantic/core-api/src/eQuantic.Core.Api/Resources/SwaggerJson.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DocumentationOptions.SignInUrl!));
            
            #line default
            #line hidden
            this.Write("\", true);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n            var json = JSON.stringify({ \"email\": userName, \"password\": password });\n\n            xhr.send(json);\n        }\n    }\n\n    // append to event right after SwaggerUIBundle initialized\n    window.addEventListener('load', () => setTimeout(overrider, 0), false);\n}());");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class SwaggerJsonBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
